{"version":3,"sources":["webpack:///./js/task-2.js","webpack:///./js/task-3.js","webpack:///./index.js"],"names":["users","name","active","toggleUserState","allUsers","userName","Promise","resolve","reject","map","user","logger","updatedUsers","console","table","then","makeTransaction","transaction","min","max","delay","Math","floor","random","setTimeout","id","time","logSuccess","log","logError","warn","amount","catch","ms"],"mappings":"yLAMMA,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGZC,EAAkB,SAACC,EAAUC,GACtC,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAGzBD,EAFqBH,EAASK,KAAI,SAAAC,GAAI,OAClCA,EAAKT,OAASI,EAAd,iBAA8BK,EAA9B,CAAoCR,QAASQ,EAAKR,SAAWQ,UAMnEC,EAAS,SAAAC,GAAY,OAAIC,QAAQC,MAAMF,IAK7CT,EAAgBH,EAAO,SAASe,KAAKJ,GACrCR,EAAgBH,EAAO,OAAOe,KAAKJ,GCrBnC,IAIaK,EAAkB,SAACC,GAC5B,IAL+BC,EAAKC,EAK9BC,GALyBF,EAKS,IALJC,EAKS,IAJxCE,KAAKC,MAAMD,KAAKE,UAAYJ,EAAMD,EAAM,GAAKA,IAMlD,OAAO,IAAIZ,SAAQ,SAACC,EAASC,GACzBgB,YAAW,WACYH,KAAKE,SAAW,IAE/BhB,EAAQ,CAACkB,GAAIR,EAAYQ,GAAIC,KAAMN,IAEvCZ,EAAO,CAAEiB,GAAIR,EAAYQ,OAC1BL,OAILO,EAAa,SAAC,GAAe,IAAdF,EAAc,EAAdA,GAAIC,EAAU,EAAVA,KACvBb,QAAQe,IAAR,eAA2BH,EAA3B,iBAA8CC,EAA9C,OAGIG,EAAW,SAAC,GAAS,IAARJ,EAAQ,EAARA,GACjBZ,QAAQiB,KAAR,gCAA6CL,EAA7C,8BAIFT,EAAgB,CAAES,GAAI,GAAIM,OAAQ,MAC/BhB,KAAKY,GACLK,MAAMH,GAETb,EAAgB,CAAES,GAAI,GAAIM,OAAQ,MAC/BhB,KAAKY,GACLK,MAAMH,GAETb,EAAgB,CAAES,GAAI,GAAIM,OAAQ,KAC/BhB,KAAKY,GACLK,MAAMH,GAETb,EAAgB,CAAES,GAAI,GAAIM,OAAQ,MAC/BhB,KAAKY,GACLK,MAAMH,GCrCT,IAAMT,EAAQ,SAAAa,GACV,OAAO,IAAI3B,SAAQ,SAACC,GAChBiB,YAAW,WACPjB,EAAQ0B,KACTA,OAILtB,EAAS,SAAAe,GAAI,OAAIb,QAAQe,IAAR,kBAA8BF,EAA9B,OAGvBN,EAAM,KAAML,KAAKJ,GACjBS,EAAM,KAAML,KAAKJ,GACjBS,EAAM,MAAML,KAAKJ,K","file":"main.b6f1927909bfc5365c67.js","sourcesContent":["\n// Задание 2\n// Перепиши функцию toggleUserState() так,\n// чтобы она не использовала callback - функцию callback,\n// а принимала всего два параметра allUsers и userName и возвращала промис.\n\nconst users = [\n  { name: 'Mango', active: true },\n  { name: 'Poly', active: false },\n  { name: 'Ajax', active: true },\n  { name: 'Lux', active: false },\n];\n\nexport const toggleUserState = (allUsers, userName) => {\n    return new Promise((resolve, reject) => {\n        const updatedUsers = allUsers.map(user =>\n            user.name === userName ? { ...user, active: !user.active } : user);\n        resolve(updatedUsers);\n    })\n        \n}\n\nconst logger = updatedUsers => console.table(updatedUsers);\n\n/*\n * Должно работать так\n */\ntoggleUserState(users, 'Mango').then(logger);\ntoggleUserState(users, 'Lux').then(logger);","// Задание 3\n// Перепиши функцию makeTransaction() так,\n// чтобы она не использовала callback - функции\n// onSuccess и onError,\n// а принимала всего один параметр\n// transaction и возвращала промис.\n\nconst randomIntegerFromInterval = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nexport const makeTransaction = (transaction) => {\n    const delay = randomIntegerFromInterval(200, 500);\n\n    return new Promise((resolve, reject) => {\n        setTimeout(() => {\n            const canProcess = Math.random() > 0.3;\n            if (canProcess) {\n                resolve({id: transaction.id, time: delay})\n            }\n            reject({ id: transaction.id})\n        }, delay);\n    });\n}\n\nconst logSuccess = ({id, time}) => {\n  console.log(`Transaction ${id} processed in ${time}ms`);\n};\n\nconst logError = ({id}) => {\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\n};\n\n\nmakeTransaction({ id: 70, amount: 150 })\n  .then(logSuccess)\n  .catch(logError);\n\nmakeTransaction({ id: 71, amount: 230 })\n  .then(logSuccess)\n  .catch(logError);\n\nmakeTransaction({ id: 72, amount: 75 })\n  .then(logSuccess)\n  .catch(logError);\n\nmakeTransaction({ id: 73, amount: 100 })\n  .then(logSuccess)\n  .catch(logError);","import './styles.css';\nimport toggleUserState from './js/task-2';\nimport makeTransaction from './js/task-3';\n\n// Задание 1\n// Напиши функцию delay(ms), которая возвращает промис,\n// переходящий в состояние \"resolved\" через ms миллисекунд.\n// Значением исполнившегося промиса должно быть то кол - во\n// миллисекунд которое передали во время вызова функции delay.\n\n\nconst delay = ms => {\n    return new Promise((resolve) => {\n        setTimeout(() => {\n            resolve(ms)\n        }, ms);\n    });\n}\n\nconst logger = time => console.log(`Resolved after ${time}ms`);\n\n// Вызовы функции для проверки\ndelay(2000).then(logger); // Resolved after 2000ms\ndelay(1000).then(logger); // Resolved after 1000ms\ndelay(1500).then(logger); // Resolved after 1500ms\n\n\n"],"sourceRoot":""}